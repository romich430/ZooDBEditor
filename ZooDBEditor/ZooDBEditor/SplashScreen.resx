<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        /9j/4AAQSkZJRgABAQEBLAEsAAD/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYa
        HSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgo
        KCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAH0AfQDASIAAhEBAxEB/8QA
        HAABAAICAwEAAAAAAAAAAAAAAAcIBQYCAwQB/8QASxABAAIBAwEEBAgLBAkDBQAAAAECAwQFEQYHEiEx
        QVFhcRMVIoGRocHRFBcjMkJSVFVik7EWM3KSJCVDU4KUssLhNnSiNDdjg9L/xAAbAQEAAwEBAQEAAAAA
        AAAAAAAABAUGAwIBB//EADURAQABAwIDBAgFBQEBAAAAAAABAgMEBRESITETQVGhFBVSYXGBkdEiMlPh
        8CMzQrHBNPH/2gAMAwEAAhEDEQA/ALUgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        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
        Nh0fQHTmj1OLUYNBNc2K0Xpb4fJ4THlPm2lb2sOq5Y7HL2nbpsnUWKq7fZ3+aAq9mXUE7pbSfB4IxViJ
        nVd/8nxPq9Mz7OEn9G9C7d05EZ//AKrcOPHUZI/N/wAEfo+/z9rbh6xtMsY9XHTG8+/ufbWHatTxRHMA
        WCUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA//9k=
</value>
  </data>
</root>